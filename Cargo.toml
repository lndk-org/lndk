[package]
name = "lndk"
version = "0.0.1"
edition = "2021"
repository = "https://github.com/lndk-org/lndk"

[[bin]]
name = "lndk-cli"
path = "src/cli.rs"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[package.metadata.configure_me]
spec = "config_spec.toml"

[dependencies]
async-trait = "0.1.66"
bitcoin = { version = "0.30.2", features = ["rand"] }
clap = { version = "4.4.6", features = ["derive", "string"] }
futures = "0.3.26"
home = "0.5.5"
lightning = { git = "https://github.com/lightningdevkit/rust-lightning", rev = "06f9dd7", features = ["max_level_trace", "_test_utils"] }
rand_chacha = "0.3.1"
rand_core = "0.6.4"
log = "0.4.17"
log4rs = { version = "1.2.0", features = ["file_appender"] }
rcgen = { version = "0.13.1", features = ["pem", "x509-parser"] }
tokio = { version = "1.25.0", features = ["rt", "rt-multi-thread"] }
tonic = { version = "0.11", features = [ "tls", "transport" ] }
tonic_lnd = { git = "https://github.com/orbitalturtle/tonic_lnd", rev="afb0187621bca604f606cacfe3cb2aedf5d2fc89", package="fedimint-tonic-lnd", features = ["lightningrpc", "routerrpc"] }
hex = "0.4.3"
configure_me = "0.4.0"
bytes = "1.4.0"
triggered = "0.1.2"
prost = "0.12"

[dev-dependencies]
bitcoincore-rpc = { package="core-rpc", version = "0.17.0" }
bitcoind = { version = "0.30.0", features = [ "22_0" ] }
chrono = { version = "0.4.26" }
ldk-sample = { git = "https://github.com/lndk-org/ldk-sample", branch = "offer-handling-send-payment" }
mockall = "0.11.3"
tempfile = "3.5.0"

[build-dependencies]
configure_me_codegen = "0.4.4"
tonic-build = "0.11"

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.16.0"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell"]
# Target platforms to build apps for (Rust target-triple syntax)
targets = ["aarch64-apple-darwin", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc"]
# Publish jobs to run in CI
pr-run-mode = "plan"
# Whether to install an updater program
install-updater = true
# Enable GitHub Artifact Attestations
github-attestations = true

[workspace.metadata.release]
pre-release-hook = ["git-cliff", "--unreleased", "--prepend", "CHANGELOG.md", "--tag", "{{version}}"]
